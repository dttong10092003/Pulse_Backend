const Message = require('../models/message');
const redisClient = require('../config/redisClient');

// üìå G·ª≠i tin nh·∫Øn v√† c·∫≠p nh·∫≠t Redis
exports.sendMessage = async (req, res) => {
  try {
    const { conversationId, senderId, text } = req.body;

    const newMessage = new Message({ conversationId, senderId, text });
    await newMessage.save();

    // C·∫≠p nh·∫≠t Redis: X√≥a cache tin nh·∫Øn c≈© ƒë·ªÉ t·∫£i l·∫°i tin m·ªõi nh·∫•t
    await redisClient.del(`messages:${conversationId}`);

    // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán g·∫ßn ƒë√¢y c·ªßa user
    await redisClient.zAdd(`recentChats:${senderId}`, { score: Date.now(), value: conversationId });

    res.status(201).json(newMessage);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå L·∫•y tin nh·∫Øn (t·∫≠n d·ª•ng Redis cache)
exports.getMessages = async (req, res) => {
  try {
    const { conversationId } = req.params;

    // Ki·ªÉm tra cache trong Redis tr∆∞·ªõc
    const cachedMessages = await redisClient.get(`messages:${conversationId}`);
    if (cachedMessages) {
      return res.json(JSON.parse(cachedMessages));
    }

    // N·∫øu kh√¥ng c√≥ trong cache, l·∫•y t·ª´ MongoDB
    const messages = await Message.find({ conversationId });

    // Cache tin nh·∫Øn trong Redis (60 gi√¢y)
    await redisClient.set(`messages:${conversationId}`, JSON.stringify(messages), { EX: 60 });

    res.json(messages);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
